/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, REcipe as PrismaREcipe } from "@prisma/client";

export class REcipeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.REcipeCountArgs, "select">): Promise<number> {
    return this.prisma.rEcipe.count(args);
  }

  async rEcipes<T extends Prisma.REcipeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.REcipeFindManyArgs>
  ): Promise<PrismaREcipe[]> {
    return this.prisma.rEcipe.findMany<Prisma.REcipeFindManyArgs>(args);
  }
  async rEcipe<T extends Prisma.REcipeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.REcipeFindUniqueArgs>
  ): Promise<PrismaREcipe | null> {
    return this.prisma.rEcipe.findUnique(args);
  }
  async createREcipe<T extends Prisma.REcipeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.REcipeCreateArgs>
  ): Promise<PrismaREcipe> {
    return this.prisma.rEcipe.create<T>(args);
  }
  async updateREcipe<T extends Prisma.REcipeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.REcipeUpdateArgs>
  ): Promise<PrismaREcipe> {
    return this.prisma.rEcipe.update<T>(args);
  }
  async deleteREcipe<T extends Prisma.REcipeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.REcipeDeleteArgs>
  ): Promise<PrismaREcipe> {
    return this.prisma.rEcipe.delete(args);
  }
}
